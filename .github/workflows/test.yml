name: Get Latest Release

on:
  push:

jobs:
  get-latest-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set current date as env variable
      run: echo "NOW=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        
    - name: Echo current date
      run: echo $NOW # Gives "2022-12-11T01:42:20"

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install @actions/github

    - name: Get Latest Release
      uses: actions/github-script@v6
      with:
        script: |
         const date = `${{ env.NOW }}`;
         console.log(date);
         const date2 = `$(date +'%Y-%m-%d %H:%M:%S')`;
         console.log(date2);
         const current_TimeInGMT = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
         console.log(current_TimeInGMT);
         /*const githubContext = require('@actions/github').context;
         const octokit = require('@actions/github').getOctokit(process.env.GITHUB_TOKEN);
  
         const { owner, repo } = githubContext.repo;
  
         // Make a request to the GitHub Releases API
         const latestRelease = await octokit.repos.getLatestRelease({ owner, repo });
         const latestReleaseTag = latestRelease.data.tag_name;
  
         // Set the output variable for later use
         console.log(`::set-output name=latest_release::${latestReleaseTag}`);*/

    - name: Use Latest Release
      run: |
        # Use the latest release tag in subsequent steps
        echo "Latest release: ${{ steps.get-latest-release.outputs.latest_release }}"

    - name: Test Message
      run: |
        # Use the latest release tag in subsequent steps
        echo "::warning:: Test message"
